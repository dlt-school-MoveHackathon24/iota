/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "burnWIOTA"
      | "iotaToken"
      | "lockETH"
      | "lockedFunds"
      | "mintWIOTA"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "unlockETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BurnWIOTA"
      | "LockETH"
      | "MintWIOTA"
      | "OwnershipTransferred"
      | "UnlockETH"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "burnWIOTA",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "iotaToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "lockETH", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lockedFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintWIOTA",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockETH",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "burnWIOTA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iotaToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintWIOTA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockETH", data: BytesLike): Result;
}

export namespace BurnWIOTAEvent {
  export type InputTuple = [
    user: AddressLike,
    addressIOTA: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, addressIOTA: string, amount: bigint];
  export interface OutputObject {
    user: string;
    addressIOTA: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockETHEvent {
  export type InputTuple = [
    user: AddressLike,
    addressIOTA: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, addressIOTA: string, amount: bigint];
  export interface OutputObject {
    user: string;
    addressIOTA: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintWIOTAEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockETHEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Bridge extends BaseContract {
  connect(runner?: ContractRunner | null): Bridge;
  waitForDeployment(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  burnWIOTA: TypedContractMethod<
    [amount: BigNumberish, addressIOTA: string],
    [void],
    "nonpayable"
  >;

  iotaToken: TypedContractMethod<[], [string], "view">;

  lockETH: TypedContractMethod<[addressIOTA: string], [void], "payable">;

  lockedFunds: TypedContractMethod<[], [bigint], "view">;

  mintWIOTA: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockETH: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "burnWIOTA"
  ): TypedContractMethod<
    [amount: BigNumberish, addressIOTA: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "iotaToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lockETH"
  ): TypedContractMethod<[addressIOTA: string], [void], "payable">;
  getFunction(
    nameOrSignature: "lockedFunds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintWIOTA"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockETH"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BurnWIOTA"
  ): TypedContractEvent<
    BurnWIOTAEvent.InputTuple,
    BurnWIOTAEvent.OutputTuple,
    BurnWIOTAEvent.OutputObject
  >;
  getEvent(
    key: "LockETH"
  ): TypedContractEvent<
    LockETHEvent.InputTuple,
    LockETHEvent.OutputTuple,
    LockETHEvent.OutputObject
  >;
  getEvent(
    key: "MintWIOTA"
  ): TypedContractEvent<
    MintWIOTAEvent.InputTuple,
    MintWIOTAEvent.OutputTuple,
    MintWIOTAEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UnlockETH"
  ): TypedContractEvent<
    UnlockETHEvent.InputTuple,
    UnlockETHEvent.OutputTuple,
    UnlockETHEvent.OutputObject
  >;

  filters: {
    "BurnWIOTA(address,string,uint256)": TypedContractEvent<
      BurnWIOTAEvent.InputTuple,
      BurnWIOTAEvent.OutputTuple,
      BurnWIOTAEvent.OutputObject
    >;
    BurnWIOTA: TypedContractEvent<
      BurnWIOTAEvent.InputTuple,
      BurnWIOTAEvent.OutputTuple,
      BurnWIOTAEvent.OutputObject
    >;

    "LockETH(address,string,uint256)": TypedContractEvent<
      LockETHEvent.InputTuple,
      LockETHEvent.OutputTuple,
      LockETHEvent.OutputObject
    >;
    LockETH: TypedContractEvent<
      LockETHEvent.InputTuple,
      LockETHEvent.OutputTuple,
      LockETHEvent.OutputObject
    >;

    "MintWIOTA(address,uint256)": TypedContractEvent<
      MintWIOTAEvent.InputTuple,
      MintWIOTAEvent.OutputTuple,
      MintWIOTAEvent.OutputObject
    >;
    MintWIOTA: TypedContractEvent<
      MintWIOTAEvent.InputTuple,
      MintWIOTAEvent.OutputTuple,
      MintWIOTAEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UnlockETH(address,uint256)": TypedContractEvent<
      UnlockETHEvent.InputTuple,
      UnlockETHEvent.OutputTuple,
      UnlockETHEvent.OutputObject
    >;
    UnlockETH: TypedContractEvent<
      UnlockETHEvent.InputTuple,
      UnlockETHEvent.OutputTuple,
      UnlockETHEvent.OutputObject
    >;
  };
}
