/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Bridge, BridgeInterface } from "../../contracts/Bridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_iotaToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "addressIOTA",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "BurnWIOTA",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "addressIOTA",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "LockETH",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "MintWIOTA",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "UnlockETH",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "addressIOTA",
        type: "string",
      },
    ],
    name: "burnWIOTA",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "iotaToken",
    outputs: [
      {
        internalType: "contract WIOTA",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "addressIOTA",
        type: "string",
      },
    ],
    name: "lockETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "lockedFunds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mintWIOTA",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unlockETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200137e3803806200137e833981810160405281019062000037919062000235565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a4919062000278565b60405180910390fd5b620000be816200010760201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000295565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001fd82620001d0565b9050919050565b6200020f81620001f0565b81146200021b57600080fd5b50565b6000815190506200022f8162000204565b92915050565b6000602082840312156200024e576200024d620001cb565b5b60006200025e848285016200021e565b91505092915050565b6200027281620001f0565b82525050565b60006020820190506200028f600083018462000267565b92915050565b6110d980620002a56000396000f3fe6080604052600436106100865760003560e01c80639a8f2a49116100595780639a8f2a4914610114578063b8afaa481461013d578063cf7a952314610168578063ed581fd314610191578063f2fde38b146101ba57610086565b80630d0aa3141461008b5780632dd9e2d3146100a7578063715018a6146100d25780638da5cb5b146100e9575b600080fd5b6100a560048036038101906100a09190610a21565b6101e3565b005b3480156100b357600080fd5b506100bc610295565b6040516100c99190610aed565b60405180910390f35b3480156100de57600080fd5b506100e76102bb565b005b3480156100f557600080fd5b506100fe6102cf565b60405161010b9190610b29565b60405180910390f35b34801561012057600080fd5b5061013b60048036038101906101369190610b7a565b6102f8565b005b34801561014957600080fd5b506101526104ff565b60405161015f9190610be9565b60405180910390f35b34801561017457600080fd5b5061018f600480360381019061018a9190610c30565b610505565b005b34801561019d57600080fd5b506101b860048036038101906101b39190610cae565b610631565b005b3480156101c657600080fd5b506101e160048036038101906101dc9190610cee565b6107d9565b005b60003411610226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021d90610d78565b60405180910390fd5b34600260008282546102389190610dc7565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f9c7621ab32a27b6851f3d2653fb656f30e52daf5c93eb00bea9408057e5db66d83833460405161028993929190610e48565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102c361085f565b6102cd60006108e6565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000831161033b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033290610d78565b60405180910390fd5b82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016103979190610b29565b602060405180830381865afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d89190610e8f565b1015610419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041090610f08565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033856040518363ffffffff1660e01b8152600401610476929190610f28565b600060405180830381600087803b15801561049057600080fd5b505af11580156104a4573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f0bf07192517777d6102e74ea4f3ca91a27a4c54c4d472756e9a03fd797234ec98383866040516104f293929190610e48565b60405180910390a2505050565b60025481565b61050d61085f565b60008111610550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054790610d78565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b81526004016105ad929190610f28565b600060405180830381600087803b1580156105c757600080fd5b505af11580156105db573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f822d3c135c20a58a2844bfe4dde0f0c189a3d24897b7e3357e10dcea0eaed323826040516106259190610be9565b60405180910390a25050565b61063961085f565b6000811161067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067390610d78565b60405180910390fd5b8060025410156106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b890610f9d565b60405180910390fd5b80600260008282546106d39190610fbd565b9250508190555060008273ffffffffffffffffffffffffffffffffffffffff168260405161070090611022565b60006040518083038185875af1925050503d806000811461073d576040519150601f19603f3d011682016040523d82523d6000602084013e610742565b606091505b5050905080610786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077d90611083565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f05549711f09721cc230c21209433216d28925b192d255b92d799d0cf874cccf8836040516107cc9190610be9565b60405180910390a2505050565b6107e161085f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108535760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161084a9190610b29565b60405180910390fd5b61085c816108e6565b50565b6108676109aa565b73ffffffffffffffffffffffffffffffffffffffff166108856102cf565b73ffffffffffffffffffffffffffffffffffffffff16146108e4576108a86109aa565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016108db9190610b29565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126109e1576109e06109bc565b5b8235905067ffffffffffffffff8111156109fe576109fd6109c1565b5b602083019150836001820283011115610a1a57610a196109c6565b5b9250929050565b60008060208385031215610a3857610a376109b2565b5b600083013567ffffffffffffffff811115610a5657610a556109b7565b5b610a62858286016109cb565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ab3610aae610aa984610a6e565b610a8e565b610a6e565b9050919050565b6000610ac582610a98565b9050919050565b6000610ad782610aba565b9050919050565b610ae781610acc565b82525050565b6000602082019050610b026000830184610ade565b92915050565b6000610b1382610a6e565b9050919050565b610b2381610b08565b82525050565b6000602082019050610b3e6000830184610b1a565b92915050565b6000819050919050565b610b5781610b44565b8114610b6257600080fd5b50565b600081359050610b7481610b4e565b92915050565b600080600060408486031215610b9357610b926109b2565b5b6000610ba186828701610b65565b935050602084013567ffffffffffffffff811115610bc257610bc16109b7565b5b610bce868287016109cb565b92509250509250925092565b610be381610b44565b82525050565b6000602082019050610bfe6000830184610bda565b92915050565b610c0d81610b08565b8114610c1857600080fd5b50565b600081359050610c2a81610c04565b92915050565b60008060408385031215610c4757610c466109b2565b5b6000610c5585828601610c1b565b9250506020610c6685828601610b65565b9150509250929050565b6000610c7b82610a6e565b9050919050565b610c8b81610c70565b8114610c9657600080fd5b50565b600081359050610ca881610c82565b92915050565b60008060408385031215610cc557610cc46109b2565b5b6000610cd385828601610c99565b9250506020610ce485828601610b65565b9150509250929050565b600060208284031215610d0457610d036109b2565b5b6000610d1284828501610c1b565b91505092915050565b600082825260208201905092915050565b7f416d6f756e74207a65726f206f72206c65737300000000000000000000000000600082015250565b6000610d62601383610d1b565b9150610d6d82610d2c565b602082019050919050565b60006020820190508181036000830152610d9181610d55565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dd282610b44565b9150610ddd83610b44565b9250828201905080821115610df557610df4610d98565b5b92915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610e278385610d1b565b9350610e34838584610dfb565b610e3d83610e0a565b840190509392505050565b60006040820190508181036000830152610e63818587610e1b565b9050610e726020830184610bda565b949350505050565b600081519050610e8981610b4e565b92915050565b600060208284031215610ea557610ea46109b2565b5b6000610eb384828501610e7a565b91505092915050565b7f496e73756666696369656e7420494f54412066756e6473000000000000000000600082015250565b6000610ef2601783610d1b565b9150610efd82610ebc565b602082019050919050565b60006020820190508181036000830152610f2181610ee5565b9050919050565b6000604082019050610f3d6000830185610b1a565b610f4a6020830184610bda565b9392505050565b7f496e73756666696369656e74206c6f636b65642066756e647300000000000000600082015250565b6000610f87601983610d1b565b9150610f9282610f51565b602082019050919050565b60006020820190508181036000830152610fb681610f7a565b9050919050565b6000610fc882610b44565b9150610fd383610b44565b9250828203905081811115610feb57610fea610d98565b5b92915050565b600081905092915050565b50565b600061100c600083610ff1565b915061101782610ffc565b600082019050919050565b600061102d82610fff565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b600061106d601483610d1b565b915061107882611037565b602082019050919050565b6000602082019050818103600083015261109c81611060565b905091905056fea2646970667358221220edfc32fa508a6c7c73891fc1fd4afa86df8280fd0552e0bfd84e87f81fa4790e64736f6c63430008180033";

type BridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bridge__factory extends ContractFactory {
  constructor(...args: BridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _iotaToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_iotaToken, overrides || {});
  }
  override deploy(
    _iotaToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_iotaToken, overrides || {}) as Promise<
      Bridge & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Bridge__factory {
    return super.connect(runner) as Bridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeInterface {
    return new Interface(_abi) as BridgeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Bridge {
    return new Contract(address, _abi, runner) as unknown as Bridge;
  }
}
